-6 -67 -61 -38 9 -16 -16 32 56 16
27 -63 23 -56 63 10 33 -9 -55 69
-44 -23 -58 12 -55 0 21 -25 27 48
1 41 -38 57 38 -17 -50 -2 -63 7
32 -46 -11 30 10 13 -48 -37 66 -53
-54 34 51 -40 -33 52 -62 -37 -54 -9
-58 40 -30 -9 59 7 -66 -12 -18 41
-50 67 36 13 12 -2 -28 10 -60 -58
3 -27 -52 56 26 -52 59 -31 -48 -6
-59 -30 50 36 5 -11 0 60 -24 -34

while (i < fdf->hght * fdf->wdth)
	{
		ft_putnbr((fdf->cur)[i]->x);
		ft_putchar(' ');
		ft_putnbr((fdf->cur)[i]->y);
		ft_putchar(';');
		i++;
		if (i % fdf->wdth == 0)
			ft_putchar('\n');
}

typedef struct	s_br
{
	double	x;
	double	y;
	double	dx;
	double	dy;
	t_pnt	xy0;
	t_pnt	xy1;
	double	error;
	int		dif;
	int		ystep;
}				t_br;



typedef struct	s_br
{
	double	x;
	double	y;
	double	dx;
	double	dy;
	t_pnt	xy0;
	t_pnt	xy1;
	double	error;
	int		steep;
	int		ystep;
	int		color;
	int		col_start;
	int		col_end;
}				t_br;

/*void		plot_line_br(t_fdf *fdf, int i0, int i1)
{
	t_br	*br;

	if (!(br = (t_br *)ft_memalloc(sizeof(t_br))))
		fdf_smthwrong();
	br->xy0 = *((fdf->cur)[i0 - 1]);
	br->xy1 = *((fdf->cur)[i1 - 1]);
	if ((br->dif = fabs(br->xy1.y - br->xy0.y) > fabs(br->xy1.x - br->xy0.x)))
		fdf_swap(&(br->xy0.x), &(br->xy0.y), &(br->xy1.x), &(br->xy1.y));
	if (br->xy0.x > br->xy1.x)
		fdf_swap(&(br->xy0.x), &(br->xy1.x), &(br->xy0.y), &(br->xy1.y));
	fdf_br_init(br, br->xy0, br->xy1);
	while (br->x <= br->xy1.x)
	{
		fdf->tmp.x = br->dif ? br->y : br->x;
		fdf->tmp.y = br->dif ? br->x : br->y;
		if (fdf->tmp.x >= 0 && fdf->tmp.x < WINSIZEX
			&& fdf->tmp.y >= 0 && fdf->tmp.y < WINSIZEY)
			*(int*)(fdf->image + (int)(fdf->tmp.x) * 4 +
					(int)(fdf->tmp.y) * fdf->s_line) =
					color_pnt_deflt(*fdf, br->x, i0, i1);
		br->error -= br->dy;
		if (br->error < 0)
		{
			br->y += br->ystep;
			br->error += br->dx;
		}
		(br->x) += 1;
	}
	ft_memdel((void **)&br);
	return ;
}

 br.xy0 = *((fdf->cur)[i0 - 1]);
	br.xy1 = *((fdf->cur)[i1 - 1]);
	if ((br.dif = fabs(br.xy1.y - br.xy0.y) > fabs(br.xy1.x - br.xy0.x)))
		fdf_swap(&(br.xy0.x), &(br.xy0.y), &(br.xy1.x), &(br.xy1.y));
	if (br.xy0.x > br.xy1.x)
		fdf_swap(&(br.xy0.x), &(br.xy1.x), &(br.xy0.y), &(br.xy1.y));
*/

/*
 * void		fdf_swap(double *a, double *b, double *d, double *e)
{
	int c;

	c = *a;
	*a = *b;
	*b = c;
	c = *d;
	*d = *e;
	*e = c;
	return ;
}

void		fdf_br_init(t_br *br, t_pnt xy0, t_pnt xy1)
{
	br->dx = xy1.x - xy0.x;
	br->dy = fabs(xy1.y - xy0.y);
	br->error = br->dx / 2;
	br->ystep = (xy0.y < xy1.y) ? 1 : -1;
	br->x = xy0.x;
	br->y = xy0.y;
	return ;
}

void		plot_line_br(t_fdf *fdf, int i0, int i1)
{
	t_br	br;

	br.xy0 = *((fdf->cur)[i0 - 1]);
	br.xy1 = *((fdf->cur)[i1 - 1]);
	if ((br.dif = fabs(br.xy1.y - br.xy0.y) > fabs(br.xy1.x - br.xy0.x)))
		fdf_swap(&(br.xy0.x), &(br.xy0.y), &(br.xy1.x), &(br.xy1.y));
	if (br.xy0.x > br.xy1.x)
		fdf_swap(&(br.xy0.x), &(br.xy1.x), &(br.xy0.y), &(br.xy1.y));
	fdf_br_init(&br, br.xy0, br.xy1);
	while (br.x <= br.xy1.x)
	{
		fdf->tmp.x = br.dif ? br.y : br.x;
		fdf->tmp.y = br.dif ? br.x : br.y;
		if (fdf->tmp.x >= 0 && fdf->tmp.x < WINSIZEX
		&& fdf->tmp.y >= 0 && fdf->tmp.y < WINSIZEY)
			*(int*)(fdf->image + (int)(fdf->tmp.x) * 4 +
					(int)(fdf->tmp.y) * fdf->s_line) =
							color_pnt_deflt(*fdf, br.x, i0, i1);
		br.error -= br.dy;
		if (br.error < 0)
		{
			br.y += br.ystep;
			br.error += br.dx;
		}
		(br.x) += 1;
	}
	return ;
}

 typedef struct	s_br
{
	double	x;
	double	y;
	double	dx;
	double	dy;
	t_pnt	xy0;
	t_pnt	xy1;
	double	error;
	int		dif;
	int		ystep;
}				t_br;
 */

 /* ************************************************************************** */
 /*                                                                            */
 /*                                                        :::      ::::::::   */
 /*   fdf_print_line.c                                   :+:      :+:    :+:   */
 /*                                                    +:+ +:+         +:+     */
 /*   By: pmelodi <marvin@42.fr>                     +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2019/09/05 21:04:39 by pmelodi           #+#    #+#             */
 /*   Updated: 2019/09/16 22:04:54 by pmelodi          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */

 #include "../includes/fdf.h"

 void		fdf_swap(double *a, double *b, double *d, double *e)
 {
 	double c;

 	c = *a;
 	*a = *b;
 	*b = c;
 	c = *d;
 	*d = *e;
 	*e = c;
 	return ;
 }

 void		ft_swap(int *a, int *b)
 {
 	int c;

 	c = *a;
 	*a = *b;
 	*b = c;
 	return ;
 }

 void		fdf_br_init(t_fdf *fdf, int start, int end)
 {
 	fdf->br.xy0 = *((fdf->cur)[start - 1]);
 	fdf->br.xy1 = *((fdf->cur)[end - 1]);
 	fdf->br.color = fdf->br.xy0.color;
 	fdf->br.col_start = fdf->br.xy0.color;
 	fdf->br.col_end = fdf->br.xy1.color;
 	if ((fdf->br.steep = fabs(fdf->br.xy1.y - fdf->br.xy0.y)
 						 > fabs(fdf->br.xy1.x - fdf->br.xy0.x)))
 		fdf_swap(&(fdf->br.xy0.x), &(fdf->br.xy0.y),
 				 &(fdf->br.xy1.x), &(fdf->br.xy1.y));
 	if (fdf->br.xy0.x > fdf->br.xy1.x)
 	{
 		fdf_swap(&(fdf->br.xy0.x), &(fdf->br.xy1.x),
 				 &(fdf->br.xy0.y), &(fdf->br.xy1.y));
 		ft_swap(&(fdf->br.col_start), &(fdf->br.col_end));
 	}
 	fdf->br.dx = fdf->br.xy1.x - fdf->br.xy0.x;
 	fdf->br.dy = fabs(fdf->br.xy1.y - fdf->br.xy0.y);
 	fdf->br.error = fdf->br.dx / 2;
 	fdf->br.ystep = (fdf->br.xy0.y < fdf->br.xy1.y) ? 1 : -1;
 	fdf->br.x = fdf->br.xy0.x;
 	fdf->br.y = fdf->br.xy0.y;
 	return ;
 }

 void		plot_line_br(t_fdf fdf, int start, int end)
 {
 	double e2;

 	fdf_br_init(&fdf, start, end);
 	while (fdf.br.x <= fdf.br.xy1.x)
 	{
 		fdf.tmp.x = fdf.br.steep ? fdf.br.y : fdf.br.x;
 		fdf.tmp.y = fdf.br.steep ? fdf.br.x : fdf.br.y;
 		if (fdf.tmp.x >= 0 && fdf.tmp.x < WINSIZEX
 			&& fdf.tmp.y >= 0 && fdf.tmp.y < WINSIZEY)
 			*(int*)(fdf.image + (int)(fdf.tmp.x) * 4 +
 					(int)(fdf.tmp.y) * fdf.s_line)
 					= color_pnt_deflt(fdf, fdf.br.x, start, end);
 		fdf.br.error -= fdf.br.dy;
 		e2 = fdf.br.error;
 		if (fdf.br.error < 0)
 		{
 			fdf.br.y += fdf.br.ystep;
 			fdf.br.error += fdf.br.dx;
 		}
 		(fdf.br.x) += 1;
 	}
 	return ;
 }
 //fdf_get_color(fdf, start, end);
 //color_pnt_deflt(fdf, fdf.br.x, start, end);


int		color_pnt_deflt(t_fdf fdf, int i, int i0, int i1)
{
	if (fdf.br.col_start == fdf.br.col_end)
		return (fdf.br.col_start);
	if (((fdf.cur)[i0 - 1]->x == fdf.tmp.x) &&
		((fdf.cur)[i0 - 1])->y == fdf.tmp.y)
		return ((fdf.cur)[i0 - 1]->color);
	if (((fdf.cur)[i1 - 1]->x == fdf.tmp.x) &&
		((fdf.cur)[i1 - 1])->y == fdf.tmp.y)
		return ((fdf.cur)[i1 - 1]->color);
	return (DEF_COL);
}
